sensor:
  - platform: template
    sensors:
      denon_source:
        # value_template: '{% if states.media_player.denon %}{{ states.media_player.denon.attributes["source"] }}{% else %}Off{% endif %}'
        # value_template: '{% if states.media_player.denon.state == "off" %}Off{% else %}{{ states.media_player.denon.attributes["source"] }}{% endif %}'
        value_template: '{% if states.media_player.denon.attributes["source"] %}{{ states.media_player.denon.attributes["source"] }}{% else %}Off{% endif %}'
        # friendly_name: 'Denon Source'

script:
  turnon_tv_androidbox:
    alias: "Turn on TV and Android Box"
    sequence:
      - service: switch.turn_on
        entity_id: switch.common_room_tv
      - service: switch.turn_on
        entity_id: switch.common_room_android_box
  turnoff_tv_androidbox:
    alias: "Turn off TV and Android Box"
    sequence:
      - service: switch.turn_off
        entity_id: switch.common_room_android_box
      - service: switch.turn_off
        entity_id: switch.common_room_tv

switch:
  - platform: template
    switches:
      androidtv:
        value_template: "{{ is_state('media_player.denon', 'on') }}"
        turn_on:
          service: script.turnon_tv_androidbox
        turn_off:
          service: script.turnoff_tv_androidbox
      bedroomsound:
        value_template: "{{ is_state('switch.europa', 'on') and states.sensor.europa_current_consumption.state.split(' ')[0] | float > 40 }}"
        turn_on:
          service: switch.turn_on
          entity_id: switch.bedroom_denon
        turn_off:
          service: switch.turn_off
          entity_id: switch.bedroom_denon

automation:
  # - alias: "Change AVR Source"
  #   trigger:
  #     - platform: state
  #       entity_id: sensor.denon_source
  #   # condition:
  #   #   - condition: template
  #   #     value_template: '{{ trigger.to_state.attributes.volume_level != trigger.from_state.attributes.volume_level }}'
  #   action:
  #     - service: input_slider.select_value
  #       data_template:
  #         entity_id: input_slider.avrmode
  #         value: '{{ states.media_player.denon.attributes["source"] }}'

  - alias: "Denon Source Cable TV"
    trigger:
      - platform: state
        entity_id: sensor.denon_source
        to: 'Cabel TV'
    condition:
      - condition: state
        entity_id: media_player.denon
        state: 'playing'
    action:
      - service: scene.turn_on
        entity_id: scene.common_room_bright

  - alias: "Denon Source Music"
    trigger:
      - platform: state
        entity_id: sensor.denon_source
        to: 'Music'
    condition:
      - condition: state
        entity_id: media_player.denon
        state: 'playing'
    action:
      - service: scene.turn_on
        entity_id: scene.common_room_dim

# switch:
#   - platform: denonxml
#     host: 192.168.1.66
#     port: 1
#     scan_interval: 5
#   - platform: denonxml
#     host: 192.168.1.66
#     port: 2
#     scan_interval: 5
#
# shell_command:
#   set_denon_volume: '/bin/curl -k http://192.168.1.66/goform/formiPhoneAppVolume.xml?{{ zone }}+{{ volume | float - 80 }}'
#   set_denon_source: '/bin/curl -X GET http://192.168.1.66/goform/formiPhoneAppDirect.xml?{{ source }}'
#
# homeassistant:
#   customize:
#     switch.denon_zone1:
#       friendly_name: Common Room
#       icon: mdi:video
#       custom_ui_state_card: custom_source
#     switch.denon_zone2:
#       friendly_name: Zone2
#       icon: mdi:volume-high
#       custom_ui_state_card: custom_source
