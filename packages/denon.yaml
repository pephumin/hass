# input_slider:
#   volume_common_room:
#     name: Volume Common Room
#     initial: 0.35
#     min: 0.0
#     max: 0.5
#     step: 0.05
#     icon: mdi:volume-high
#   volume_bedroom:
#     name: Volume Bedroom
#     initial: 0.25
#     min: 0.0
#     max: 0.5
#     step: 0.05
#     icon: mdi:volume-high

input_select:
  denon_mode:
    name: 'Common Room Denon Mode'
    options:
      - 'Off'
      - 'Cable TV'
      - 'Music'
      - 'Dune'
      - 'Apple TV'
    icon: mdi:amplifier

switch:
  - platform: template
    switches:
      hometheatre:
        value_template: "{% if states.sensor.titan_current_consumption.state %}{{ states.sensor.titan_current_consumption.state | float > 100 }}{% endif %}"
        turn_on:
          service: script.hometheatre_turnon
        turn_off:
          service: script.hometheatre_turnoff
      sonytv:
        # value_template: '{% if is_state("sensor.denonsourcecheck", "Off") %}false{% else %}{% if not is_state("sensor.titan_current_consumption", "") %}{{ states.sensor.titan_current_consumption.state | float > 100 }}{% endif %}{% endif %}'
        value_template: '{% if is_state("sensor.denon_source", "Off") %}false{% else %}{% if not is_state("sensor.titan_current_consumption", "") %}{{ states.sensor.titan_current_consumption.state | float > 100 }}{% endif %}{% endif %}'
        turn_on:
          service: switch.turn_on
          entity_id: switch.common_room_tv
        turn_off:
          service: switch.turn_off
          entity_id: switch.common_room_tv
      android_box:
        value_template: '{{ is_state("binary_sensor.android_box", "on") }}'
        turn_on:
          service: switch.turn_on
          entity_id: switch.common_room_android_box
        turn_off:
          service: switch.turn_off
          entity_id: switch.common_room_android_box
      bedroomsound:
        value_template: "{% if states.sensor.europa_current_consumption.state %}{{ states.sensor.europa_current_consumption.state | float > 40 }}{% endif %}"
        turn_on:
          service: switch.turn_on
          entity_id: switch.bedroom_denon
        turn_off:
          service: switch.turn_off
          entity_id: switch.bedroom_denon

sensor:
  - platform: template
    sensors:
      denon_source:
        value_template: '{% if is_state("media_player.denon", "on") %}{% if not states.media_player.denon.attributes.source %}Off{% else %}{{ states.media_player.denon.attributes.source }}{% endif %}{% else %}Off{% endif %}'
        entity_id:
          - media_player.denon
  - platform: command_line
    command: !secret denon_sourcecheck
    name: denonsourcecheck

binary_sensor:
  - platform: ping
    host: 192.168.1.45
    name: "XDJ_RX"
  # - platform: command_line
  #   command: '/bin/ping -W 1 -c 1 192.168.1.45 > /dev/null 2>&1 && echo success || echo fail'
  #   name: 'ping_xdj_rx'
  #   device_class: connectivity
  #   payload_on: 'success'
  #   payload_off: 'fail'
  - platform: ping
    host: 192.168.1.55
    name: "Apple_TV"
  - platform: ping
    host: 192.168.1.66
    name: "Denon"
  - platform: ping
    host: 192.168.1.77
    name: "Dune"
  # - platform: command_line
  #   command: '/bin/ping -W 1 -c 1 192.168.1.77 > /dev/null 2>&1 && echo success || echo fail'
  #   name: 'ping_dune'
  #   device_class: connectivity
  #   payload_on: 'success'
  #   payload_off: 'fail'
  - platform: ping
    host: 192.168.1.88
    name: "Android_Box"

shell_command:
  denon_deviceinfo: !secret denon_deviceinfo
  denon_mainzone: !secret denon_mainzone
  denon_mainzone_status: !secret denon_mainzone_status
  denon_mainzone_statuslite: !secret denon_mainzone_statuslite
  denon_sourcecheck: !secret denon_sourcecheck
  denon_zone2_status: !secret denon_zone2_status
  denon_zone2_statuslite: !secret denon_zone2_statuslite
  denon_power_on: !secret denon_power_on
  denon_power_off: !secret denon_power_off
  denon_volume_40: !secret denon_volume_40
  denon_volume_45: !secret denon_volume_45
  denon_volume_50: !secret denon_volume_50
  denon_mute_on: !secret denon_mute_on
  denon_mute_off: !secret denon_mute_off
  denon_source_dune: !secret denon_source_dune
  denon_source_appletv: !secret denon_source_appletv
  denon_source_satcbl: !secret denon_source_satcbl
  denon_source_music: !secret denon_source_music
  denon_source_usbipod: !secret denon_source_usbipod
  denon_source_mediaserver: !secret denon_source_mediaserver
  denon_source_mode_auto: !secret denon_source_mode_auto
  denon_source_mode_analog: !secret denon_source_mode_analog
  # kodi_playpause: !secret kodi_playpause
  # kodi_prev: !secret kodi_prev
  # kodi_next: !secret kodi_next
  # kodi_pe: !secret kodi_pe
  # kodi_up: !secret kodi_up
  # kodi_movies: !secret kodi_movies
  # kodi_vol: !secret kodi_vol
  dune_off: !secret dune_off
  dune_on: !secret dune_on
  dune_play: !secret dune_play
  dune_pause: !secret dune_pause
  dune_stop: !secret dune_stop
  dune_info: !secret dune_info
  dune_popup: !secret dune_popup
  dune_top: !secret dune_top
  dune_return: !secret dune_return
  dune_audio: !secret dune_audio
  dune_subtitle: !secret dune_subtitle

script:

  kodi_play_youtube_playlist:
    alias: "Kodi Play Music DJ"
    sequence:
      - service: media_player.play_media
        data_template:
          entity_id: media_player.kodi
          media_content_id: '{% if playlist != "" %}plugin://plugin.video.youtube/play/?playlist_id={{ playlist }}&order=default&play=1&repeat=all{% endif %}'
          media_content_type: 'video'

  kodi_play_music_dj:
    alias: "Kodi Play Music DJ"
    sequence:
      - service: media_player.kodi_call_method
        data:
          entity_id: media_player.kodi
          method: VideoLibrary.Player.SetPartymode
          properties:
            - title
            - year
            - file
            - lastplayed

  kodi_update_audio_library:
    alias: Update Kodi Audio Library
    sequence:
      - service: media_player.kodi_call_method
        data:
          entity_id: media_player.kodi
          method: AudioLibrary.Scan
      - delay: 00:01:00
      - service: media_player.kodi_call_method
        data:
          entity_id: media_player.kodi
          method: AudioLibrary.Clean

  kodi_update_video_library:
    alias: Update Kodi VDO Library
    sequence:
      - service: media_player.kodi_call_method
        data:
          entity_id: media_player.kodi
          method: VideoLibrary.Scan
      - delay: 00:01:00
      - service: media_player.kodi_call_method
        data:
          entity_id: media_player.kodi
          method: VideoLibrary.Clean

  hometheatre_turnon:
    alias: "Home Theatre Turns On"
    sequence:
      - service: switch.turn_on
        entity_id: switch.titan
      - delay: 00:00:02
      - service: switch.turn_on
        entity_id: switch.common_room_tv
      - delay: 00:00:05
      - service: switch.turn_on
        entity_id: switch.common_room_android_box
      - delay: 00:00:05
      - service: script.denon_turnon
      - service: script.switch_to_cabletv

  hometheatre_turnoff:
    alias: "Home Theatre Turns Off"
    sequence:
      - service: switch.turn_off
        entity_id: switch.common_room_android_box
      - delay: 00:00:01
      - service: switch.turn_off
        entity_id: switch.mimas
      - delay: 00:00:10
      - service: switch.turn_off
        entity_id: switch.common_room_tv
      - delay: 00:00:10
      - service: script.switch_to_off
      - delay: 00:00:03
      - service: switch.turn_off
        entity_id: switch.titan

  switch_to_cabletv:
    alias: "Switch Media to Cable TV"
    sequence:
      - service: script.denon_turnon
      - wait_template: '{{ is_state("script.denon_turnon", "off") }}'
        timeout: 00:00:02
      - condition: template
        # value_template: '{{ not is_state("sensor.denonsourcecheck", "SAT/CBL") }}'
        value_template: '{{ not is_state("sensor.denon_source", "Cable TV") }}'
      - service: shell_command.denon_source_satcbl
      - delay: 00:00:07
      - condition: template
        value_template: '{{ "true" if newvolume != "" else "false" }}'
      - service_template: shell_command.denon_volume_{{ newvolume }}

  switch_to_music:
    alias: "Switch Media to Music"
    sequence:
      - service: script.denon_turnon
      - wait_template: '{{ is_state("script.denon_turnon", "off") }}'
        timeout: 00:00:02
      - condition: template
        # value_template: '{{ not is_state("sensor.denonsourcecheck", "Music") }}'
        value_template: '{{ not is_state("sensor.denon_source", "Music") }}'
      - service: shell_command.denon_source_music
      - delay: 00:00:07
      - condition: template
        value_template: '{{ "true" if newvolume != "" else "false" }}'
      - service_template: shell_command.denon_volume_{{ newvolume }}

  switch_to_dune:
    alias: "Switch Media to Dune"
    sequence:
      - service: script.denon_turnon
      - wait_template: '{{ is_state("script.denon_turnon", "off") }}'
        timeout: 00:00:02
      - condition: template
        # value_template: '{{ not is_state("sensor.denonsourcecheck", "BD") }}'
        value_template: '{{ not is_state("sensor.denon_source", "Dune") }}'
      - service: shell_command.denon_source_dune
      - delay: 00:00:07
      - condition: template
        value_template: '{{ "true" if newvolume != "" else "false" }}'
      - service_template: shell_command.denon_volume_{{ newvolume }}

  switch_to_appletv:
    alias: "Switch Media to Apple TV"
    sequence:
      - service: script.denon_turnon
      - wait_template: '{{ is_state("script.denon_turnon", "off") }}'
        timeout: 00:00:02
      - condition: template
        # value_template: '{{ not is_state("sensor.denonsourcecheck", "MPLAY") }}'
        value_template: '{{ not is_state("sensor.denon_source", "Apple TV") }}'
      - service: shell_command.denon_source_appletv
      - delay: 00:00:07
      - condition: template
        value_template: '{{ "true" if newvolume != "" else "false" }}'
      - service_template: shell_command.denon_volume_{{ newvolume }}

  switch_to_off:
    alias: "Switch Media to Off"
    sequence:
      - condition: template
        # value_template: '{{ not is_state("sensor.denonsourcecheck", "Off") }}'
        value_template: '{{ not is_state("sensor.denon_source", "Off") }}'
      - service: media_player.turn_off
        entity_id: media_player.denon
      - delay: 00:00:02
      - service: input_select.select_option
        data:
          entity_id: input_select.denon_mode
          option: 'Off'

  denon_turnon:
    alias: "Turn on Denon when it is Off"
    sequence:
      - condition: template
        value_template: '{{ is_state("switch.titan", "on") and is_state("media_player.denon", "off") }}'
      - service: media_player.turn_on
        entity_id: media_player.denon

automation:

  - alias: 'Denon Mode changes'
    trigger:
      - platform: state
        entity_id: input_select.denon_mode
    action:
      - service_template: '{% if is_state("input_select.denon_mode", "Cable TV") %}script.switch_to_cabletv{% elif is_state("input_select.denon_mode", "Music") %}script.switch_to_music{% elif is_state("input_select.denon_mode", "Dune") %}script.switch_to_dune{% elif is_state("input_select.denon_mode", "Apple TV") %}script.switch_to_appletv{% elif is_state("input_select.denon_mode", "Off") %}script.switch_to_off{% else %}{% endif %}'
        data_template:
          newvolume: '{% if is_state("input_select.denon_mode", "Cable TV") %}50{% elif is_state("input_select.denon_mode", "Music") %}40{% elif is_state("input_select.denon_mode", "Dune") %}40{% elif is_state("input_select.denon_mode", "Apple TV") %}45{% else %}false{% endif %}'

  - alias: "Denon Mode aligns"
    trigger:
      - platform: time
        minutes: '/1'
        seconds: 00
      - platform: state
        # entity_id: sensor.denonsourcecheck
        entity_id: sensor.denon_source
    condition:
      - condition: or
        conditions:
          - condition: template
            # value_template: '{{ is_state("sensor.denonsourcecheck", "SAT/CBL") and not is_state("input_select.denon_mode", "Cable TV") }}'
            value_template: '{{ is_state("sensor.denon_source", "Cable TV") and not is_state("input_select.denon_mode", "Cable TV") }}'
          - condition: template
            # value_template: '{{ is_state("sensor.denonsourcecheck", "Music") and not is_state("input_select.denon_mode", "Music") }}'
            value_template: '{{ is_state("sensor.denon_source", "Music") and not is_state("input_select.denon_mode", "Music") }}'
          - condition: template
            # value_template: '{{ is_state("sensor.denonsourcecheck", "BD") and not is_state("input_select.denon_mode", "Dune") }}'
            value_template: '{{ is_state("sensor.denon_source", "Dune") and not is_state("input_select.denon_mode", "Dune") }}'
          - condition: template
            # value_template: '{{ is_state("sensor.denonsourcecheck", "MPLAY") and not is_state("input_select.denon_mode", "Apple TV") }}'
            value_template: '{{ is_state("sensor.denon_source", "Apple TV") and not is_state("input_select.denon_mode", "Apple TV") }}'
          - condition: template
            # value_template: '{{ is_state("sensor.denonsourcecheck", "") and not is_state("input_select.denon_mode", "Off") }}'
            value_template: '{{ is_state("sensor.denon_source", "Off") and not is_state("input_select.denon_mode", "Off") }}'
          # - condition: template
          #   value_template: '{{ is_state("sensor.denonsourcecheck", "USB/IPOD") or is_state("sensor.denonsourcecheck", "Internet Radio") or is_state("sensor.denonsourcecheck", "NET") }}'
          # - condition: template
          #   value_template: '{{ is_state("sensor.denon_source", "TV") or is_state("sensor.denon_source", "TUNER") or is_state("sensor.denon_source", "AUX") }}'
    action:
      - service: input_select.select_option
        entity_id: input_select.denon_mode
        data_template:
          # option: '{% if is_state("sensor.denonsourcecheck", "SAT/CBL") %}Cable TV{% elif is_state("sensor.denonsourcecheck", "Music") %}Music{% elif is_state("sensor.denonsourcecheck", "BD") %}Dune{% elif is_state("sensor.denonsourcecheck", "MPLAY") %}Apple TV{% elif is_state("sensor.denonsourcecheck", "") %}Off{% endif %}'
          option: '{% if is_state("sensor.denon_source", "Cable TV") %}Cable TV{% elif is_state("sensor.denon_source", "Music") %}Music{% elif is_state("sensor.denon_source", "Dune") %}Dune{% elif is_state("sensor.denon_source", "Apple TV") %}Apple TV{% elif is_state("sensor.denon_source", "Off") %}Off{% endif %}'

  - alias: "Auto Switch XDJ-RX On"
    trigger:
      - platform: template
        value_template: '{% if is_state("device_tracker.xdj_rx", "home") or is_state("device_tracker.ping_xdj_rx", "home") or is_state("binary_sensor.xdj_rx", "on") or is_state("binary_sensor.ping_xdj_rx", "on") %}true{% else %}false{% endif %}'
    condition:
      - condition: template
        value_template: '{{ not is_state_attr("media_player.denon", "source", "Music") }}'
    action:
      - service: script.switch_to_music
        data:
          newvolume: 40

  - alias: "Auto Switch XDJ-RX Off"
    trigger:
      - platform: template
        value_template: '{% if not is_state("device_tracker.xdj_rx", "home") or not is_state("device_tracker.ping_xdj_rx", "home") or is_state("binary_sensor.xdj_rx", "off") or is_state("binary_sensor.ping_xdj_rx", "off") %}true{% else %}false{% endif %}'
    condition:
      - condition: template
        value_template: '{{ is_state_attr("media_player.denon", "source", "Music") }}'
    action:
      - service: script.switch_to_cabletv
        data:
          newvolume: 50

  - alias: "Auto Switch Dune On"
    trigger:
      - platform: template
        value_template: '{% if is_state("device_tracker.dune", "home") or is_state("device_tracker.ping_dune", "home") or is_state("binary_sensor.dune", "on") %}true{% else %}false{% endif %}'
    condition:
      - condition: template
        value_template: '{{ not is_state_attr("media_player.denon", "source", "BD") }}'
    action:
      - service: script.switch_to_dune
        data:
          newvolume: 40

  - alias: "Auto Switch Dune Off"
    trigger:
      - platform: template
        value_template: '{% if not is_state("device_tracker.dune", "home") or not is_state("device_tracker.ping_dune", "home") or is_state("binary_sensor.dune", "off") %}true{% else %}false{% endif %}'
    condition:
      - condition: template
        value_template: '{{ is_state_attr("media_player.denon", "source", "BD") }}'
    action:
      - service: script.switch_to_cabletv
        data:
          newvolume: 50

  # - alias: "Lights Dune Plays"
  #   trigger:
  #     - platform: state
  #       entity_id: media_player.dune
  #       from: 'idle'
  #       to: 'playing'
  #   condition:
  #     - condition: or
  #       conditions:
  #         - condition: state
  #           entity_id: sun.sun
  #           state: 'below_horizon'
  #         - condition: time
  #           after: '18:00:00'
  #           before: '06:00:00'
  #   action:
  #       service: scene.turn_on
  #       entity_id: scene.common_room_dim
  #
  # - alias: "Lights Dune Pauses"
  #   trigger:
  #     - platform: state
  #       entity_id: media_player.dune
  #       from: 'playing'
  #       to: 'paused'
  #   condition:
  #     - condition: or
  #       conditions:
  #         - condition: state
  #           entity_id: sun.sun
  #           state: 'below_horizon'
  #         - condition: time
  #           after: '18:00:00'
  #           before: '06:00:00'
  #   action:
  #     - service: scene.turn_on
  #       entity_id: scene.common_room_alive
  #
  # - alias: "Lights Dune Stops"
  #   trigger:
  #     - platform: state
  #       entity_id: media_player.dune
  #       from: 'playing'
  #       to: 'idle'
  #   condition:
  #     - condition: or
  #       conditions:
  #         - condition: state
  #           entity_id: sun.sun
  #           state: 'below_horizon'
  #         - condition: time
  #           after: '18:00:00'
  #           before: '06:00:00'
  #   action:
  #     - service: scene.turn_on
  #       entity_id: scene.common_room_bright

  # - alias: Volume Common Room
  #   trigger:
  #     - platform: state
  #       entity_id: media_player.denon
  #   condition:
  #     - condition: template
  #       value_template: "{{ not is_state_attr('media_player.denon', 'volume_level', states('input_slider.volume_common_room')) }}"
  #   action:
  #     - service: input_slider.select_value
  #       data_template:
  #         entity_id: input_slider.volume_common_room
  #         value: '{{ trigger.to_state.attributes.volume_level }}'

  # - alias: Volume Adjust Common Room
  #   trigger:
  #     - platform: state
  #       entity_id: input_slider.volume_common_room
  #   condition:
  #     - condition: template
  #       value_template: "{{ not is_state_attr('media_player.denon', 'volume_level', states('input_slider.volume_common_room')) }}"
  #   action:
  #     - service: media_player.volume_set
  #       data_template:
  #         entity_id: media_player.denon
  #         volume_level: "{{ states('input_slider.volume_common_room') }}"

  # - alias: Volume Bedroom
  #   trigger:
  #     - platform: state
  #       entity_id: media_player.itunes
  #   condition:
  #     - condition: template
  #       value_template: "{{ not is_state_attr('media_player.itunes', 'volume_level', states('input_slider.volume_bedroom')) }}"
  #   action:
  #     - service: input_slider.select_value
  #       data_template:
  #         entity_id: input_slider.volume_bedroom
  #         value: '{{ trigger.to_state.attributes.volume_level }}'

  # - alias: Volume Adjust Bedroom
  #   trigger:
  #     - platform: state
  #       entity_id: input_slider.volume_bedroom
  #   condition:
  #     - condition: template
  #       value_template: "{{ not is_state_attr('media_player.denon', 'volume_level', states('input_slider.volume_common_room')) }}"
  #   action:
  #     - service: media_player.volume_set
  #       data_template:
  #         entity_id: media_player.itunes
  #         volume_level: "{{ states('input_slider.volume_bedroom') }}"
