# input_slider:
#   volume_common_room:
#     name: Volume Common Room
#     initial: 0.35
#     min: 0.0
#     max: 0.5
#     step: 0.05
#     icon: mdi:volume-high
#   volume_bedroom:
#     name: Volume Bedroom
#     initial: 0.25
#     min: 0.0
#     max: 0.5
#     step: 0.05
#     icon: mdi:volume-high

input_select:
  denon_mode:
    name: 'Common Room Denon Mode'
    options:
      - 'Off'
      - 'Cable TV'
      - 'Music'
      - 'Dune'
      - 'Apple TV'
    icon: mdi:amplifier

sensor:
  - platform: template
    sensors:
      denon_source:
        value_template: '{% if is_state("media_player.denon", "on") %}{% if not states.media_player.denon.attributes.source %}Off{% else %}{{ states.media_player.denon.attributes.source }}{% endif %}{% else %}Off{% endif %}'
  - platform: command_line
    command: !secret denon_sourcecheck
    name: denonsourcecheck

binary_sensor:
  - platform: ping
    host: 192.168.1.45
    name: "XDJ_RX"
  - platform: ping
    host: 192.168.1.55
    name: "Apple_TV"
  - platform: ping
    host: 192.168.1.66
    name: "Denon"
  - platform: ping
    host: 192.168.1.77
    name: "Dune"
  - platform: ping
    host: 192.168.1.88
    name: "Android_Box"

shell_command:
  denon_deviceinfo: !secret denon_deviceinfo
  denon_mainzone: !secret denon_mainzone
  denon_mainzone_status: !secret denon_mainzone_status
  denon_mainzone_statuslite: !secret denon_mainzone_statuslite
  denon_sourcecheck: !secret denon_sourcecheck
  denon_zone2_status: !secret denon_zone2_status
  denon_zone2_statuslite: !secret denon_zone2_statuslite
  denon_power_on: !secret denon_power_on
  denon_power_off: !secret denon_power_off
  denon_volume_40: !secret denon_volume_40
  denon_volume_45: !secret denon_volume_45
  denon_volume_50: !secret denon_volume_50
  denon_mute_on: !secret denon_mute_on
  denon_mute_off: !secret denon_mute_off
  denon_source_dune: !secret denon_source_dune
  denon_source_appletv: !secret denon_source_appletv
  denon_source_satcbl: !secret denon_source_satcbl
  denon_source_music: !secret denon_source_music
  denon_source_usbipod: !secret denon_source_usbipod
  denon_source_mediaserver: !secret denon_source_mediaserver
  denon_source_mode_auto: !secret denon_source_mode_auto
  denon_source_mode_analog: !secret denon_source_mode_analog
  # kodi_playpause: !secret kodi_playpause
  # kodi_prev: !secret kodi_prev
  # kodi_next: !secret kodi_next
  # kodi_pe: !secret kodi_pe
  # kodi_up: !secret kodi_up
  # kodi_movies: !secret kodi_movies
  # kodi_vol: !secret kodi_vol
  dune_off: !secret dune_off
  dune_on: !secret dune_on
  dune_play: !secret dune_play
  dune_pause: !secret dune_pause
  dune_stop: !secret dune_stop
  dune_info: !secret dune_info
  dune_popup: !secret dune_popup
  dune_top: !secret dune_top
  dune_return: !secret dune_return
  dune_audio: !secret dune_audio
  dune_subtitle: !secret dune_subtitle

automation:

  - alias: 'Denon Mode changes'
    trigger:
      - platform: state
        entity_id: input_select.denon_mode
    action:
      # - service_template: '{% if is_state("input_select.denon_mode", "Cable TV") %}script.switch_to_cabletv{% elif is_state("input_select.denon_mode", "Music") %}script.switch_to_music{% elif is_state("input_select.denon_mode", "Dune") %}script.switch_to_dune{% elif is_state("input_select.denon_mode", "Apple TV") %}script.switch_to_appletv{% elif is_state("input_select.denon_mode", "Off") %}script.switch_to_off{% elif is_state("input_select.denon_mode", "Select a mode") %}false{% else %}false{% endif %}'
      - service_template: '{% if trigger.to_state.state == "Cable TV" %}script.switch_to_cabletv{% elif trigger.to_state.state == "Music" %}script.switch_to_music{% elif trigger.to_state.state == "Dune" %}script.switch_to_dune{% elif trigger.to_state.state == "Apple TV" %}script.switch_to_appletv{% elif trigger.to_state.state == "Off" %}script.switch_to_off{% elif trigger.to_state.state == "Select a mode" %}false{% else %}false{% endif %}'
        data_template:
          newvolume: '{% if is_state("input_select.denon_mode", "Cable TV") %}50{% elif is_state("input_select.denon_mode", "Music") %}40{% elif is_state("input_select.denon_mode", "Dune") %}40{% elif is_state("input_select.denon_mode", "Apple TV") %}45{% else %}false{% endif %}'

  - alias: "Denon Mode aligns"
    trigger:
      - platform: state
        entity_id: sensor.denonsourcecheck
      - platform: state
        entity_id: sensor.denon_source
    condition:
      - condition: or
        conditions:
          - condition: template
            value_template: '{{ is_state("sensor.denonsourcecheck", "SAT/CBL") and is_state("sensor.denon_source", "Cable TV") and not is_state("input_select.denon_mode", "Cable TV") }}'
          - condition: template
            value_template: '{{ is_state("sensor.denonsourcecheck", "CD") and is_state("sensor.denon_source", "Music") and not is_state("input_select.denon_mode", "Music") }}'
          - condition: template
            value_template: '{{ is_state("sensor.denonsourcecheck", "BD") and is_state("sensor.denon_source", "Dune") and not is_state("input_select.denon_mode", "Dune") }}'
          - condition: template
            value_template: '{{ is_state("sensor.denonsourcecheck", "MPLAY") and is_state("sensor.denon_source", "Apple TV") and not is_state("input_select.denon_mode", "Apple TV") }}'
          - condition: template
            value_template: '{{ is_state("sensor.denonsourcecheck", "") and is_state("sensor.denon_source", "Off") and not is_state("input_select.denon_mode", "Off") }}'
    action:
      - service: input_select.select_option
        data_template:
          entity_id: input_select.denon_mode
          option: '{{ states("sensor.denon_source") }}'
          # option: '{% if is_state("sensor.denonsourcecheck", "SAT/CBL") and is_state("sensor.denon_source", "Cable TV") and not is_state("input_select.denon_mode", "Cable TV") %}Cable TV{% elif is_state("sensor.denonsourcecheck", "CD") and is_state("sensor.denon_source", "Music") and not is_state("input_select.denon_mode", "Music") %}Music{% elif is_state("sensor.denonsourcecheck", "BD") and is_state("sensor.denon_source", "Dune") and not is_state("input_select.denon_mode", "Dune") %}Dune{% elif is_state("sensor.denonsourcecheck", "MPLAY") and is_state("sensor.denon_source", "Apple TV") and not is_state("input_select.denon_mode", "Apple TV") %}Apple TV{% elif is_state("sensor.denonsourcecheck", "") and is_state("sensor.denon_source", "Off") and not is_state("input_select.denon_mode", "Off") %}Off{% endif %}'

  # - alias: "Auto Switch XDJ-RX On"
  #   trigger:
  #     - platform: state
  #       entity_id: device_tracker.xdj_rx
  #       from: 'not_home'
  #       to: 'home'
  #     - platform: state
  #       entity_id: binary_sensor.xdj_rx
  #       from: 'off'
  #       to: 'on'
  #   condition:
  #     - condition: template
  #       value_template: '{{ not is_state("sensor.denonsourcecheck", "CD") or not is_state("sensor.denon_source", "Music") }}'
  #   action:
  #     - service: script.switch_to_music
  #       data:
  #         newvolume: 40

  # - alias: "Auto Switch XDJ-RX Off"
  #   trigger:
  #     - platform: state
  #       entity_id: device_tracker.xdj_rx
  #       from: 'home'
  #       to: 'not_home'
  #     - platform: state
  #       entity_id: binary_sensor.xdj_rx
  #       from: 'on'
  #       to: 'off'
  #   condition:
  #     - condition: template
  #       value_template: '{{ is_state("sensor.denonsourcecheck", "CD") or is_state("sensor.denon_source", "Music") }}'
  #   action:
  #     - service: script.switch_to_cabletv
  #       data:
  #         newvolume: 50

  # - alias: "Auto Switch Dune On"
  #   trigger:
  #     - platform: state
  #       entity_id: device_tracker.dune
  #       from: 'not_home'
  #       to: 'home'
  #     - platform: state
  #       entity_id: binary_sensor.dune
  #       from: 'off'
  #       to: 'on'
  #   condition:
  #     - condition: template
  #       value_template: '{{ not is_state("sensor.denonsourcecheck", "BD") or not is_state("sensor.denon_source", "Dune") }}'
  #   action:
  #     - service: script.switch_to_dune
  #       data:
  #         newvolume: 40

  # - alias: "Auto Switch Dune Off"
  #   trigger:
  #     - platform: state
  #       entity_id: device_tracker.dune
  #       from: 'home'
  #       to: 'not_home'
  #     - platform: state
  #       entity_id: binary_sensor.dune
  #       from: 'on'
  #       to: 'off'
  #   condition:
  #     - condition: template
  #       value_template: '{{ is_state("sensor.denonsourcecheck", "BD") or is_state("sensor.denon_source", "Dune") }}'
  #   action:
  #     - service: script.switch_to_cabletv
  #       data:
  #         newvolume: 50

  # - alias: "Lights Dune Plays"
  #   trigger:
  #     - platform: state
  #       entity_id: media_player.dune
  #       from: 'idle'
  #       to: 'playing'
  #   condition:
  #     - condition: or
  #       conditions:
  #         - condition: state
  #           entity_id: sun.sun
  #           state: 'below_horizon'
  #         - condition: time
  #           after: '18:00:00'
  #           before: '06:00:00'
  #   action:
  #       service: scene.turn_on
  #       entity_id: scene.common_room_dim
  #
  # - alias: "Lights Dune Pauses"
  #   trigger:
  #     - platform: state
  #       entity_id: media_player.dune
  #       from: 'playing'
  #       to: 'paused'
  #   condition:
  #     - condition: or
  #       conditions:
  #         - condition: state
  #           entity_id: sun.sun
  #           state: 'below_horizon'
  #         - condition: time
  #           after: '18:00:00'
  #           before: '06:00:00'
  #   action:
  #     - service: scene.turn_on
  #       entity_id: scene.common_room_alive
  #
  # - alias: "Lights Dune Stops"
  #   trigger:
  #     - platform: state
  #       entity_id: media_player.dune
  #       from: 'playing'
  #       to: 'idle'
  #   condition:
  #     - condition: or
  #       conditions:
  #         - condition: state
  #           entity_id: sun.sun
  #           state: 'below_horizon'
  #         - condition: time
  #           after: '18:00:00'
  #           before: '06:00:00'
  #   action:
  #     - service: scene.turn_on
  #       entity_id: scene.common_room_bright

  # - alias: Volume Common Room
  #   trigger:
  #     - platform: state
  #       entity_id: media_player.denon
  #   condition:
  #     - condition: template
  #       value_template: "{{ not is_state_attr('media_player.denon', 'volume_level', states('input_slider.volume_common_room')) }}"
  #   action:
  #     - service: input_slider.select_value
  #       data_template:
  #         entity_id: input_slider.volume_common_room
  #         value: '{{ trigger.to_state.attributes.volume_level }}'

  # - alias: Volume Adjust Common Room
  #   trigger:
  #     - platform: state
  #       entity_id: input_slider.volume_common_room
  #   condition:
  #     - condition: template
  #       value_template: "{{ not is_state_attr('media_player.denon', 'volume_level', states('input_slider.volume_common_room')) }}"
  #   action:
  #     - service: media_player.volume_set
  #       data_template:
  #         entity_id: media_player.denon
  #         volume_level: "{{ states('input_slider.volume_common_room') }}"

  # - alias: Volume Bedroom
  #   trigger:
  #     - platform: state
  #       entity_id: media_player.itunes
  #   condition:
  #     - condition: template
  #       value_template: "{{ not is_state_attr('media_player.itunes', 'volume_level', states('input_slider.volume_bedroom')) }}"
  #   action:
  #     - service: input_slider.select_value
  #       data_template:
  #         entity_id: input_slider.volume_bedroom
  #         value: '{{ trigger.to_state.attributes.volume_level }}'

  # - alias: Volume Adjust Bedroom
  #   trigger:
  #     - platform: state
  #       entity_id: input_slider.volume_bedroom
  #   condition:
  #     - condition: template
  #       value_template: "{{ not is_state_attr('media_player.denon', 'volume_level', states('input_slider.volume_common_room')) }}"
  #   action:
  #     - service: media_player.volume_set
  #       data_template:
  #         entity_id: media_player.itunes
  #         volume_level: "{{ states('input_slider.volume_bedroom') }}"
