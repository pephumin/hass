# input_slider:
#   volume_common_room:
#     name: Volume Common Room
#     initial: 0.35
#     min: 0.0
#     max: 0.5
#     step: 0.05
#     icon: mdi:volume-high
#   volume_bedroom:
#     name: Volume Bedroom
#     initial: 0.25
#     min: 0.0
#     max: 0.5
#     step: 0.05
#     icon: mdi:volume-high

# input_select:
#   denonsource:
#     name: "Denon Media Source"
#     options:
#       - 'Cable TV'
#       - 'Music'
#       - 'Dune'
#       - 'Apple TV'
#       - 'Off'
#     initial: 'Off'
#     icon: mdi:amplifier

switch:
  - platform: template
    switches:
      androidtv:
        value_template: "{{ is_state('switch.titan', 'on') and states.sensor.titan_current_consumption.state.split(' ')[0] | float > 150 }}"
        turn_on:
          service: script.turnon_tv_androidbox
        turn_off:
          service: script.turnoff_tv_androidbox
      bedroomsound:
        value_template: "{{ is_state('switch.europa', 'on') and states.sensor.europa_current_consumption.state.split(' ')[0] | float > 40 }}"
        turn_on:
          service: switch.turn_on
          entity_id: switch.bedroom_denon
        turn_off:
          service: switch.turn_off
          entity_id: switch.bedroom_denon

sensor:
  - platform: template
    sensors:
      denon_source:
        value_template: '{% if states.media_player.denon.attributes["source"] %}{{ states.media_player.denon.attributes["source"] }}{% else %}Off{% endif %}'

shell_command:
  # d_deviceinfo: !secret d_deviceinfo
  # d_mainzone: !secret d_mainzone
  # d_mainzone_status: !secret d_mainzone_status
  # d_mainzone_statuslite: !secret d_mainzone_statuslite
  # d_zone2_status: !secret d_zone2_status
  # d_zone2_statuslite: !secret d_zone2_statuslite
  d_power_on: !secret d_power_on
  d_power_off: !secret d_power_off
  d_volume_40: !secret d_volume_40
  d_volume_50: !secret d_volume_50
  d_mute_on: !secret d_mute_on
  d_mute_off: !secret d_mute_off
  d_source_dune: !secret d_source_dune
  d_source_appletv: !secret d_source_appletv
  d_source_satcbl: !secret d_source_satcbl
  d_source_music: !secret d_source_music
  d_source_usbipod: !secret d_source_usbipod
  d_source_mediaserver: !secret d_source_mediaserver
  d_source_mode_auto: !secret d_source_mode_auto
  d_source_mode_analog: !secret d_source_mode_analog

script:
  turnon_tv_androidbox:
    alias: "Turn on TV and Android Box"
    sequence:
      - service: switch.turn_on
        entity_id: switch.common_room_tv
      - service: switch.turn_on
        entity_id: switch.common_room_android_box
  turnoff_tv_androidbox:
    alias: "Turn off TV and Android Box"
    sequence:
      - service: switch.turn_off
        entity_id: switch.common_room_android_box
      - service: switch.turn_off
        entity_id: switch.common_room_tv
  xdjrx_turnon:
    alias: "XDJ-RX is on entering DJ mode"
    sequence:
      - service: switch.turn_on
        entity_id: switch.common_room_subwoofer
      - delay: 00:00:01
      - service: shell_command.d_source_music
      - delay: 00:00:02
      - service: shell_command.d_source_mode_analog
      - delay: 00:00:02
      - service: media_player.volume_set
        data:
          entity_id: media_player.denon
          volume_level: 0.4
      - delay: 00:00:02
      - service: script.notifying
        data_template:
          title: '{{ title }}'
          message: '{{ message }}'
  xdjrx_turnoff:
    alias: "XDJ-RX is off exiting DJ mode"
    sequence:
      - service: switch.turn_off
        entity_id: switch.common_room_subwoofer
      - delay: 00:00:01
      - service: media_player.volume_set
        data:
          entity_id: media_player.denon
          volume_level: 0.3
      - delay: 00:00:02
      - service: shell_command.d_source_satcbl
      - delay: 00:00:02
      - service: shell_command.d_source_mode_auto
      - delay: 00:00:02
      - service: script.notifying
        data_template:
          title: '{{ title }}'
          message: '{{ message }}'

automation:

  # - alias: "Denon Align Source Cable TV"
  #   trigger:
  #     - platform: template
  #       value_template: "{{ not is_state('sensor.denon_source', states('input_select.denonsource')) }}"
  #   condition:
  #     - condition: template
  #       value_template: '{% if is_state("sensor.denon_source", "SAT/CBL") %}true{% else %}{% endif %}'
  #   action:
  #     - service: input_select.select_option
  #       data:
  #         entity_id: input_select.denonsource
  #         option: "Cable TV"
  #
  # - alias: "Denon Change Source Cable TV"
  #   trigger:
  #     # - platform: template
  #     #   value_template: '{% if is_state_attr("media_player.denon", "source", "SAT/CBL") %}true{% else %}{% endif %}'
  #     - platform: state
  #       entity_id: input_select.denonsource
  #       to: "Cable TV"
  #   action:
  #     - service: shell_command.d_source_satcbl
  #
  # - alias: "Denon Align Source Music"
  #   trigger:
  #     - platform: template
  #       value_template: "{{ not is_state('sensor.denon_source', states('input_select.denonsource')) }}"
  #   condition:
  #     - condition: template
  #       value_template: '{% if is_state("sensor.denon_source", "Music") %}true{% else %}{% endif %}'
  #   action:
  #     - service: input_select.select_option
  #       data:
  #         entity_id: input_select.denonsource
  #         option: "Music"
  #
  # - alias: "Denon Change Source Music"
  #   trigger:
  #     # - platform: template
  #     #   value_template: '{% if is_state_attr("media_player.denon", "source", "Music") %}true{% else %}{% endif %}'
  #     - platform: state
  #       entity_id: input_select.denonsource
  #       to: "Music"
  #   action:
  #     - service: shell_command.d_source_music
  #
  # - alias: "Denon Align Source Dune"
  #   trigger:
  #     - platform: template
  #       value_template: "{{ not is_state('sensor.denon_source', states('input_select.denonsource')) }}"
  #   condition:
  #     - condition: template
  #       value_template: '{% if is_state("sensor.denon_source", "Dune") %}true{% else %}{% endif %}'
  #   action:
  #     - service: input_select.select_option
  #       data:
  #         entity_id: input_select.denonsource
  #         option: "Dune"
  #
  # - alias: "Denon Change Source Dune"
  #   trigger:
  #     # - platform: template
  #     #   value_template: '{% if is_state_attr("media_player.denon", "source", "BD") %}true{% else %}{% endif %}'
  #     - platform: state
  #       entity_id: input_select.denonsource
  #       to: "Dune"
  #   action:
  #     - service: shell_command.d_source_dune
  #
  # - alias: "Denon Align Source Apple TV"
  #   trigger:
  #     - platform: template
  #       value_template: "{{ not is_state('sensor.denon_source', states('input_select.denonsource')) }}"
  #   condition:
  #     - condition: template
  #       value_template: '{% if is_state("sensor.denon_source", "Apple TV") %}true{% else %}{% endif %}'
  #   action:
  #     - service: input_select.select_option
  #       data:
  #         entity_id: input_select.denonsource
  #         option: "Apple TV"
  #
  # - alias: "Denon Change Source Apple TV"
  #   trigger:
  #     # - platform: template
  #     #   value_template: '{% if is_state_attr("media_player.denon", "source", "MPLAY") %}true{% else %}{% endif %}'
  #     - platform: state
  #       entity_id: input_select.denonsource
  #       to: "Apple TV"
  #   action:
  #     - service: shell_command.d_source_appletv
  #
  # - alias: "Denon Align Source Off"
  #   trigger:
  #     - platform: template
  #       value_template: "{{ not is_state('sensor.denon_source', states('input_select.denonsource')) }}"
  #   condition:
  #     - condition: template
  #       value_template: '{% if is_state("sensor.denon_source", "Off") %}true{% else %}{% endif %}'
  #   action:
  #     - service: input_select.select_option
  #       data:
  #         entity_id: input_select.denonsource
  #         option: "off"
  #
  # - alias: "Denon Change Source Off"
  #   trigger:
  #     # - platform: template
  #     #   value_template: '{% if is_state("media_player.denon", "off") %}true{% else %}{% endif %}'
  #     - platform: state
  #       entity_id: input_select.denonsource
  #       to: "Off"
  #   action:
  #     - service: shell_command.d_power_off

  - alias: "Auto Double Subwoofer On"
    trigger:
      - platform: template
        value_template: '{% if is_state("sensor.denon_source", "Music") %}true{% else %}{% endif %}'
      - platform: template
        value_template: '{% if is_state("sensor.denon_source", "MPLAY") %}true{% else %}{% endif %}'
      - platform: template
        value_template: '{% if is_state("sensor.denon_source", "BD") %}true{% else %}{% endif %}'
    condition:
      - condition: and
        conditions:
          - condition: template
            value_template: '{% if is_state("switch.titan", "on") %}true{% else %}{% endif %}'
          - condition: template
            value_template: '{% if is_state("media_player.denon", "on") %}true{% else %}{% endif %}'
    action:
      - service: switch.turn_on
        entity_id: switch.common_room_subwoofer

  - alias: "Auto Double Subwoofer Off"
    trigger:
      - platform: template
        value_template: '{% if is_state("sensor.denon_source", "SAT/CBL") %}true{% else %}{% endif %}'
      - platform: template
        value_template: '{% if is_state("sensor.denon_source", "NET") %}true{% else %}{% endif %}'
      - platform: template
        value_template: '{% if is_state("sensor.denon_source", "DVD") %}true{% else %}{% endif %}'
      - platform: template
        value_template: '{% if is_state("sensor.denon_source", "Game") %}true{% else %}{% endif %}'
      - platform: template
        value_template: '{% if is_state("sensor.denon_source", "AUX1") %}true{% else %}{% endif %}'
      - platform: template
        value_template: '{% if is_state("sensor.denon_source", "USB/IPOD") %}true{% else %}{% endif %}'
      - platform: template
        value_template: '{% if is_state("sensor.denon_source", "TUNER") %}true{% else %}{% endif %}'
      - platform: template
        value_template: '{% if is_state("sensor.denon_source", "TV") %}true{% else %}{% endif %}'
      - platform: template
        value_template: '{% if is_state("sensor.denon_source", "Internet Radio") %}true{% else %}{% endif %}'
      - platform: state
        entity_id: switch.titan
        from: 'on'
        to: 'off'
      - platform: state
        entity_id: media_player.denon
        from: 'on'
        to: 'off'
    action:
      - service: switch.turn_off
        entity_id: switch.common_room_subwoofer

  - alias: "Turn on XDJ-RX"
    trigger:
      - platform: state
        entity_id: binary_sensor.xdjrx
        from: 'off'
        to: 'on'
      - platform: state
        entity_id: device_tracker.xdj_rx
        from: 'not_home'
        to: 'home'
    condition:
      - condition: template
        value_template: '{% if not is_state_attr("media_player.denon", "source", "Music") %}true{% else %}{% endif %}'
    action:
      - service: script.xdjrx_turnon
        data:
          title: "XDJ-RX is on, entering DJ mode"
          message: 'XDJ-RX is on, entering DJ mode [{{now().strftime("%d.%m.%y")}} {{now().strftime("%H:%M")}}]'

  - alias: "Turn off XDJ-RX"
    trigger:
      - platform: state
        entity_id: binary_sensor.xdjrx
        from: 'on'
        to: 'off'
      - platform: state
        entity_id: device_tracker.xdj_rx
        from: 'home'
        to: 'not_home'
    condition:
      - condition: template
        value_template: '{% if is_state_attr("media_player.denon", "source", "Music") %}true{% else %}{% endif %}'
    action:
      - service: script.xdjrx_turnoff
        data:
          title: "XDJ-RX is off, exiting DJ mode"
          message: 'XDJ-RX is off, exiting DJ mode [{{now().strftime("%d.%m.%y")}} {{now().strftime("%H:%M")}}]'

  - alias: "Lights Dune Pauses/Stops"
    trigger:
      - platform: state
        entity_id: media_player.dune
        from: 'playing'
        to: 'idle'
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: '{% if is_state("input_boolean.presence_pe", "on") %}true{% else %}{% endif %}'
        - condition: template
          value_template: '{% if is_state("input_select.homemode", "Home") %}true{% else %}{% endif %}'
        - condition: or
          conditions:
            - condition: state
              entity_id: sun.sun
              state: 'below_horizon'
            - condition: time
              after: '18:00:00'
              before: '06:00:00'
    action:
      - service: scene.turn_on
        entity_id: scene.common_room_alive

  - alias: "Lights Dune Plays"
    trigger:
      - platform: state
        entity_id: media_player.dune
        from: 'idle'
        to: 'playing'
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: '{% if is_state("input_boolean.presence_pe", "on") %}true{% else %}{% endif %}'
        - condition: template
          value_template: '{% if is_state("input_select.homemode", "Home") %}true{% else %}{% endif %}'
        - condition: or
          conditions:
            - condition: state
              entity_id: sun.sun
              state: 'below_horizon'
            - condition: time
              after: '18:00:00'
              before: '06:00:00'
    action:
        service: scene.turn_on
        entity_id: scene.common_room_dim

  # - alias: Volume Common Room
  #   trigger:
  #     - platform: state
  #       entity_id: media_player.denon
  #   condition:
  #     - condition: template
  #       value_template: "{{ not is_state_attr('media_player.denon', 'volume_level', states('input_slider.volume_common_room')) }}"
  #   action:
  #     - service: input_slider.select_value
  #       data_template:
  #         entity_id: input_slider.volume_common_room
  #         value: '{{ trigger.to_state.attributes.volume_level }}'

  # - alias: Volume Adjust Common Room
  #   trigger:
  #     - platform: state
  #       entity_id: input_slider.volume_common_room
  #   condition:
  #     - condition: template
  #       value_template: "{{ not is_state_attr('media_player.denon', 'volume_level', states('input_slider.volume_common_room')) }}"
  #   action:
  #     - service: media_player.volume_set
  #       data_template:
  #         entity_id: media_player.denon
  #         volume_level: "{{ states('input_slider.volume_common_room') }}"

  # - alias: Volume Bedroom
  #   trigger:
  #     - platform: state
  #       entity_id: media_player.itunes
  #   condition:
  #     - condition: template
  #       value_template: "{{ not is_state_attr('media_player.itunes', 'volume_level', states('input_slider.volume_bedroom')) }}"
  #   action:
  #     - service: input_slider.select_value
  #       data_template:
  #         entity_id: input_slider.volume_bedroom
  #         value: '{{ trigger.to_state.attributes.volume_level }}'

  # - alias: Volume Adjust Bedroom
  #   trigger:
  #     - platform: state
  #       entity_id: input_slider.volume_bedroom
  #   condition:
  #     - condition: template
  #       value_template: "{{ not is_state_attr('media_player.denon', 'volume_level', states('input_slider.volume_common_room')) }}"
  #   action:
  #     - service: media_player.volume_set
  #       data_template:
  #         entity_id: media_player.itunes
  #         volume_level: "{{ states('input_slider.volume_bedroom') }}"
