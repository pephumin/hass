input_select:
  denon_mode:
    name: 'Common Room Denon Mode'
    options:
      - 'Off'
      - 'Cable TV'
      - 'Music'
      - 'Dune'
      - 'Apple TV'
      - 'Biscuit'
    icon: mdi:amplifier

sensor:
  - platform: template
    sensors:
      denon_source:
        value_template: '{% if is_state("media_player.denon", "on") %}{% if not states.media_player.denon.attributes.source %}Off{% else %}{{ states.media_player.denon.attributes.source }}{% endif %}{% else %}Off{% endif %}'
      # denonsourcecheck:
      #   value_template: '{% if is_state("media_player.denon", "on") %}{{ shell_command.denon_checking }}{% else %}Off{% endif %}'
  - platform: command_line
    command: !secret denon_sourcecheck
    # command: '/config/command/denon_checking'
    name: denonsourcecheck

binary_sensor:
  - platform: ping
    host: 192.168.1.45
    name: "XDJ_RX"
  - platform: ping
    host: 192.168.1.55
    name: "Apple_TV"
  - platform: ping
    host: 192.168.1.66
    name: "Denon"
  - platform: ping
    host: 192.168.1.77
    name: "Dune"
  - platform: ping
    host: 192.168.1.88
    name: "Android_Box"

shell_command:
  denon_deviceinfo: !secret denon_deviceinfo
  denon_mainzone: !secret denon_mainzone
  denon_mainzone_status: !secret denon_mainzone_status
  denon_mainzone_statuslite: !secret denon_mainzone_statuslite
  denon_sourcecheck: !secret denon_sourcecheck
  denon_zone2_status: !secret denon_zone2_status
  denon_zone2_statuslite: !secret denon_zone2_statuslite
  denon_power_on: !secret denon_power_on
  denon_power_off: !secret denon_power_off
  denon_volume_40: !secret denon_volume_40
  denon_volume_45: !secret denon_volume_45
  denon_volume_50: !secret denon_volume_50
  denon_mute_on: !secret denon_mute_on
  denon_mute_off: !secret denon_mute_off
  denon_source_dune: !secret denon_source_dune
  denon_source_appletv: !secret denon_source_appletv
  denon_source_biscuit: !secret denon_source_biscuit
  denon_source_satcbl: !secret denon_source_satcbl
  denon_source_music: !secret denon_source_music
  denon_source_usbipod: !secret denon_source_usbipod
  denon_source_mediaserver: !secret denon_source_mediaserver
  denon_source_mode_auto: !secret denon_source_mode_auto
  denon_source_mode_analog: !secret denon_source_mode_analog
  # kodi_playpause: !secret kodi_playpause
  # kodi_prev: !secret kodi_prev
  # kodi_next: !secret kodi_next
  # kodi_pe: !secret kodi_pe
  # kodi_up: !secret kodi_up
  # kodi_movies: !secret kodi_movies
  # kodi_vol: !secret kodi_vol
  dune_off: !secret dune_off
  dune_on: !secret dune_on
  dune_play: !secret dune_play
  dune_pause: !secret dune_pause
  dune_stop: !secret dune_stop
  dune_info: !secret dune_info
  dune_popup: !secret dune_popup
  dune_top: !secret dune_top
  dune_return: !secret dune_return
  dune_audio: !secret dune_audio
  dune_subtitle: !secret dune_subtitle

automation:

  - alias: 'Denon Mode changes'
    trigger:
      - platform: state
        entity_id: input_select.denon_mode
    action:
      - service_template: '{% if trigger.to_state.state == "Cable TV" %}script.switch_to_cabletv{% elif trigger.to_state.state == "Music" %}script.switch_to_music{% elif trigger.to_state.state == "Dune" %}script.switch_to_dune{% elif trigger.to_state.state == "Apple TV" %}script.switch_to_appletv{% elif trigger.to_state.state == "Biscuit" %}script.switch_to_biscuit{% elif trigger.to_state.state == "Off" %}script.switch_to_off{% else %}false{% endif %}'
        data_template:
          # newvolume: '{% if is_state("input_select.denon_mode", "Cable TV") %}50{% elif is_state("input_select.denon_mode", "Music") or is_state("input_select.denon_mode", "Dune") %}40{% elif is_state("input_select.denon_mode", "Apple TV") or is_state("input_select.denon_mode", "Biscuit") %}45{% else %}false{% endif %}'
          newvolume: '{% if trigger.to_state.state == "Cable TV" %}50{% elif trigger.to_state.state == "Music" or trigger.to_state.state == "Dune" %}40{% elif trigger.to_state.state == "Apple TV" or trigger.to_state.state == "Biscuit" %}45{% else %}false{% endif %}'

  - alias: "Denon Mode aligns"
    trigger:
      - platform: time
        minutes: '/5'
        seconds: 00
    condition:
      - condition: or
        conditions:
          # - condition: template
          #   value_template: '{{ states.sensor.denon_source.state != states.input_select.denon_mode.state }}'
          - condition: template
            value_template: '{{ is_state("sensor.denon_source", "Cable TV") and not is_state("input_select.denon_mode", "Cable TV") }}'
          - condition: template
            value_template: '{{ is_state("sensor.denon_source", "Music") and not is_state("input_select.denon_mode", "Music") }}'
          - condition: template
            value_template: '{{ is_state("sensor.denon_source", "Dune") and not is_state("input_select.denon_mode", "Dune") }}'
          - condition: template
            value_template: '{{ is_state("sensor.denon_source", "Apple TV") and not is_state("input_select.denon_mode", "Apple TV") }}'
          - condition: template
            value_template: '{{ is_state("sensor.denon_source", "Biscuit") and not is_state("input_select.denon_mode", "Biscuit") }}'
          # - condition: template
          #   value_template: '{{ is_state("sensor.denon_source", "Off") and not is_state("input_select.denon_mode", "Off") }}'
    action:
      - service: input_select.select_option
        data_template:
          entity_id: input_select.denon_mode
          option: '{{ states.sensor.denon_source.state }}'

  # - alias: "LED Animation Speed"
  #   initial_state: true
  #   hide_entity: false
  #   trigger:
  #     - platform: state
  #       entity_id: input_number.led_animation_speed
  #   action:
  #     - service: mqtt.publish
  #       data_template:
  #         topic: "led/set"
  #         payload: '{"transition": {{ trigger.to_state.state | int }}}'
  #
  # - alias: "Set LED Animation Speed"
  #   trigger:
  #     - platform: mqtt
  #       topic: "led/set"
  #   action:
  #     - service: input_number.set_value
  #       data_template:
  #         entity_id: input_number.led_animation_speed
  #         value: '{{ trigger.payload }}'
