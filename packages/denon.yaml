input_select:
  denon_mode:
    name: 'Common Room Denon Mode'
    options:
      - 'Off'
      - 'Cable TV'
      - 'Music'
      - 'Dune'
      - 'Apple TV'
      - 'Biscuit'
    icon: mdi:amplifier

sensor:
  # - platform: template
  #   sensors:
  #     denon_source:
  #       value_template: '{% if is_state("media_player.denon", "on") %}{% if not states.media_player.denon.attributes.source %}Off{% else %}{{ states.media_player.denon.attributes.source }}{% endif %}{% else %}Off{% endif %}'
  #     # denonsourcecheck:
  #     #   value_template: '{% if is_state("media_player.denon", "on") %}{{ shell_command.denon_checking }}{% else %}Off{% endif %}'
  - platform: command_line
    name: denon_source
    command: !secret denon_sourcecheck
    # command: '/config/command/denon_checking'

binary_sensor:
  - platform: ping
    host: 192.168.1.45
    name: "XDJ_RX"
    count: 2
    scan_interval: 30
  - platform: ping
    host: 192.168.1.55
    name: "Apple_TV"
    count: 2
    scan_interval: 30
  - platform: ping
    host: 192.168.1.66
    name: "Denon"
    count: 2
    scan_interval: 30
  - platform: ping
    host: 192.168.1.77
    name: "Dune"
    count: 2
    scan_interval: 30
  - platform: ping
    host: 192.168.1.88
    name: "Android_Box"
    count: 2
    scan_interval: 30

shell_command:
  denon_deviceinfo: !secret denon_deviceinfo
  denon_mainzone: !secret denon_mainzone
  denon_mainzone_status: !secret denon_mainzone_status
  denon_mainzone_statuslite: !secret denon_mainzone_statuslite
  denon_sourcecheck: !secret denon_sourcecheck
  denon_zone2_status: !secret denon_zone2_status
  denon_zone2_statuslite: !secret denon_zone2_statuslite
  denon_power_on: !secret denon_power_on
  denon_power_off: !secret denon_power_off
  denon_volume_40: !secret denon_volume_40
  denon_volume_45: !secret denon_volume_45
  denon_volume_50: !secret denon_volume_50
  denon_mute_on: !secret denon_mute_on
  denon_mute_off: !secret denon_mute_off
  denon_source_dune: !secret denon_source_dune
  denon_source_appletv: !secret denon_source_appletv
  denon_source_biscuit: !secret denon_source_biscuit
  denon_source_satcbl: !secret denon_source_satcbl
  denon_source_music: !secret denon_source_music
  denon_source_usbipod: !secret denon_source_usbipod
  denon_source_mediaserver: !secret denon_source_mediaserver
  denon_source_mode_auto: !secret denon_source_mode_auto
  denon_source_mode_analog: !secret denon_source_mode_analog
  dune_off: !secret dune_off
  dune_on: !secret dune_on
  dune_play: !secret dune_play
  # dune_pause: !secret dune_pause
  # dune_stop: !secret dune_stop
  # dune_info: !secret dune_info
  # dune_popup: !secret dune_popup
  # dune_top: !secret dune_top
  # dune_return: !secret dune_return
  # dune_audio: !secret dune_audio
  # dune_subtitle: !secret dune_subtitle

switch:
  - platform: template
    switches:
      common_room_hometheatre:
        friendly_name: "Common Room Home Theatre"
        value_template: '{{ is_state("binary_sensor.denon", "on") }}'
        turn_on:
          service: script.hometheatre_turnon
        turn_off:
          service: script.hometheatre_turnoff
      sonytv:
        friendly_name: "Common Room TV"
        value_template: '{% if is_state("binary_sensor.titan", "on") %}{{ states.sensor.titan_current_consumption.state | float > 100 }}{% endif %}'
        turn_on:
          service: switch.turn_on
          entity_id: switch.common_room_tv
        turn_off:
          service: switch.turn_off
          entity_id: switch.common_room_tv
      android_box:
        friendly_name: "Common Room Android TV"
        value_template: '{{ is_state("binary_sensor.android_box", "on") }}'
        turn_on:
          service: switch.turn_on
          entity_id: switch.common_room_android_box
        turn_off:
          service: switch.hometheatre_turnoff
          entity_id: switch.common_room_android_box
      # bedroom_sound:
      #   value_template: "{{ states.sensor.europa_current_consumption.state | float > 40 }}"
      #   turn_on:
      #     service: switch.turn_on
      #     entity_id: switch.bedroom_denon
      #   turn_off:
      #     service: switch.turn_off
      #     entity_id: switch.bedroom_denon

group:
  playlists:
    name: "Playlists"
    icon: mdi:library-music
    control: "hidden"
    view: false
    entities:
      - script.shuffle_playlist_dj
      - script.shuffle_playlist_soft
  kodi:
    name: "Kodi"
    icon: mdi:kodi
    control: "hidden"
    view: false
    entities:
      - script.kodi_play_youtube_playlist
      - script.kodi_play_music_dj
      - script.kodi_update_audio_library
      - script.kodi_update_video_library

automation:

  - alias: "Denon Mode changes"
    initial_state: 'on'
    trigger:
      - platform: state
        entity_id: input_select.denon_mode
    action:
      - service_template: '{% if trigger.to_state.state == "Cable TV" %}script.switch_to_cabletv{% elif trigger.to_state.state == "Music" %}script.switch_to_music{% elif trigger.to_state.state == "Dune" %}script.switch_to_dune{% elif trigger.to_state.state == "Apple TV" %}script.switch_to_appletv{% elif trigger.to_state.state == "Biscuit" %}script.switch_to_biscuit{% elif trigger.to_state.state == "Off" %}script.switch_to_off{% else %}false{% endif %}'
        data_template:
          newvolume: '{% if trigger.to_state.state == "Cable TV" %}50{% elif trigger.to_state.state == "Music" or trigger.to_state.state == "Dune" %}40{% elif trigger.to_state.state == "Apple TV" or trigger.to_state.state == "Biscuit" %}45{% else %}false{% endif %}'

  # - alias: "Denon Mode aligns"
  #   initial_state: 'on'
  #   trigger:
  #     - platform: time
  #       minutes: '/5'
  #       seconds: 00
  #   condition:
  #     - condition: template
  #       value_template: '{{ is_state("sensor.denon_source", "SAT/CBL") and not is_state("input_select.denon_mode", "Cable TV") }}'
  #     - condition: template
  #       value_template: '{{ is_state("sensor.denon_source", "CD") and not is_state("input_select.denon_mode", "Music") }}'
  #     - condition: template
  #       value_template: '{{ is_state("sensor.denon_source", "BD") and not is_state("input_select.denon_mode", "Dune") }}'
  #     - condition: template
  #       value_template: '{{ is_state("sensor.denon_source", "MPLAY") and not is_state("input_select.denon_mode", "Apple TV") }}'
  #     - condition: template
  #       value_template: '{{ is_state("sensor.denon_source", "GAME") and not is_state("input_select.denon_mode", "Biscuit") }}'
  #     - condition: template
  #       value_template: '{{ is_state("sensor.denon_source", "") and not is_state("input_select.denon_mode", "Off") }}'
  #   action:
  #     - service: input_select.select_option
  #       data_template:
  #         entity_id: input_select.denon_mode
  #         option: '{% if is_state("sensor.denon_source", "SAT/CBL") %}Cable TV{% elif is_state("sensor.denon_source", "CD") %}Music{% elif is_state("sensor.denon_source", "BD") %}Dune{% elif is_state("sensor.denon_source", "MPLAY") %}Apple TV{% elif is_state("sensor.denon_source", "GAME") %}Biscuit{% elif is_state("sensor.denon_source", "") %}Off{% endif %}'
  #         # option: '{{ states.sensor.denon_source.state }}'
