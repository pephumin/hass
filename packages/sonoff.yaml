switch:
  - platform: mqtt
    name: "Ganymede"
    state_topic: "stat/ganymede/POWER"
    command_topic: "cmnd/ganymede/POWER"
    availability_topic: "tele/ganymede/LWT"
    qos: 1
    payload_available: "Online"
    payload_not_available: "Offline"
    retain: true
  - platform: mqtt
    name: "Callisto"
    state_topic: "stat/callisto/POWER"
    command_topic: "cmnd/callisto/POWER"
    availability_topic: "tele/callisto/LWT"
    qos: 1
    payload_available: "Online"
    payload_not_available: "Offline"
    retain: true
  - platform: mqtt
    name: "Mimas"
    state_topic: "stat/mimas/POWER"
    command_topic: "cmnd/mimas/POWER"
    availability_topic: "tele/mimas/LWT"
    qos: 1
    payload_available: "Online"
    payload_not_available: "Offline"
    retain: true

light:
  - platform: mqtt
    name: "Pandora"
    state_topic: "stat/pandora/POWER"
    command_topic: "cmnd/pandora/POWER"
    availability_topic: "tele/pandora/LWT"
    qos: 1
    payload_available: "Online"
    payload_not_available: "Offline"
    retain: true

sensor:
  - platform: mqtt
    name: "Ganymede Uptime"
    state_topic: "tele/ganymede/STATE"
    value_template: "{{ value_json.Uptime }}"
    unit_of_measurement: "Hour(s)"
  - platform: mqtt
    name: "Ganymede Energy Today"
    state_topic: "tele/ganymede/ENERGY"
    value_template: "{{ value_json.Today | round(1) }}"
    unit_of_measurement: "kWh"
  - platform: mqtt
    name: "Ganymede Energy Yesterday"
    state_topic: "tele/ganymede/ENERGY"
    value_template: "{{ value_json.Yesterday | round(1) }}"
    unit_of_measurement: "kWh"
  - platform: mqtt
    name: "Ganymede Energy Total"
    state_topic: "tele/ganymede/ENERGY"
    value_template: "{{ value_json.Total | round(1) }}"
    unit_of_measurement: "kWh"
  - platform: mqtt
    name: "Ganymede Power"
    state_topic: "tele/ganymede/ENERGY"
    value_template: "{{ value_json.Power | round(1) }}"
    unit_of_measurement: "Watts"
  - platform: mqtt
    name: "Ganymede Power Factor"
    state_topic: "tele/ganymede/ENERGY"
    value_template: "{{ value_json.Factor | round(2) }}"
  - platform: mqtt
    name: "Ganymede Current"
    state_topic: "tele/ganymede/ENERGY"
    value_template: "{{ value_json.Current | round(2) }}"
    unit_of_measurement: "Amps"
  - platform: mqtt
    name: "Ganymede Voltage"
    state_topic: "tele/ganymede/ENERGY"
    value_template: "{{ value_json.Voltage | round(0) }}"
    unit_of_measurement: "Volts"
  - platform: mqtt
    name: "Callisto Uptime"
    state_topic: "tele/callisto/STATE"
    value_template: "{{ value_json.Uptime }}"
    unit_of_measurement: "Hour(s)"
  - platform: mqtt
    name: "Mimas Uptime"
    state_topic: "tele/mimas/STATE"
    value_template: "{{ value_json.Uptime }}"
    unit_of_measurement: "Hour(s)"
  - platform: mqtt
    name: "Pandora Uptime"
    state_topic: "tele/pandora/STATE"
    value_template: "{{ value_json.Uptime }}"
    unit_of_measurement: "Hour(s)"
  - platform: mqtt
    name: "Pandora Temperature"
    state_topic: "tele/pandora/SENSOR"
    value_template: "{{ value_json['DHT22'].Temperature }}"
    unit_of_measurement: "Â°C"
  - platform: mqtt
    name: "Pandora Humidity"
    state_topic: "tele/pandora/SENSOR"
    value_template: "{{ value_json['DHT22'].Humidity }}"
    unit_of_measurement: "%"

automation:

  - alias: "Auto Double Subwoofer On"
    trigger:
      - platform: template
        value_template: '{{ is_state("sensor.denon_source", "Music") or is_state("sensor.denon_source", "MPLAY") or is_state("sensor.denon_source", "BD") or is_state("sensor.denon_source", "DVD") or is_state("sensor.denon_source", "AUX1") or is_state("sensor.denon_source", "USB/IPOD") }}'
    condition:
      - condition: template
        value_template: '{{ is_state("switch.titan", "on") and is_state("media_player.denon", "on") }}'
    action:
      - service: switch.turn_on
        entity_id: switch.mimas

  - alias: "Auto Double Subwoofer Off"
    trigger:
      - platform: template
        value_template: '{{ is_state("sensor.denon_source", "SAT/CBL") or is_state("sensor.denon_source", "Game") or is_state("sensor.denon_source", "TV") or is_state("sensor.denon_source", "TUNER") or is_state("sensor.denon_source", "Internet Radio") or is_state("sensor.denon_source", "NET") }}'
      - platform: state
        entity_id: switch.titan
        from: 'on'
        to: 'off'
      - platform: state
        entity_id: media_player.denon
        from: 'on'
        to: 'off'
    action:
      - service: switch.turn_off
        entity_id: switch.mimas
